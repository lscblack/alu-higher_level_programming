[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dis",
        "description": "dis",
        "detail": "dis",
        "documentation": {}
    },
    {
        "label": "this",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "this",
        "description": "this",
        "detail": "this",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "hidden_4",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hidden_4",
        "description": "hidden_4",
        "detail": "hidden_4",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "python-hello_world.100-write",
        "description": "python-hello_world.100-write",
        "peekOfCode": "message = \"and that piece of art is useful - Dora Korpar, 2015-10-19\\n\"\nsys.stderr.write(message)\nsys.exit(1)",
        "detail": "python-hello_world.100-write",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "python-hello_world.102-magic_calculation",
        "description": "python-hello_world.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b):\n    return 98 + (a ** b)",
        "detail": "python-hello_world.102-magic_calculation",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "python-hello_world.3-print_number",
        "description": "python-hello_world.3-print_number",
        "peekOfCode": "number = 98\nprint(f\"{number:d} Battery street\")",
        "detail": "python-hello_world.3-print_number",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "python-hello_world.4-print_float",
        "description": "python-hello_world.4-print_float",
        "peekOfCode": "number = 3.14159\nprint(f\"Float: {number:.2f}\")",
        "detail": "python-hello_world.4-print_float",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-hello_world.5-print_string",
        "description": "python-hello_world.5-print_string",
        "peekOfCode": "str = \"Holberton School\"\ntr = str[0:9]\nprint((3*str))\nprint(tr)",
        "detail": "python-hello_world.5-print_string",
        "documentation": {}
    },
    {
        "label": "tr",
        "kind": 5,
        "importPath": "python-hello_world.5-print_string",
        "description": "python-hello_world.5-print_string",
        "peekOfCode": "tr = str[0:9]\nprint((3*str))\nprint(tr)",
        "detail": "python-hello_world.5-print_string",
        "documentation": {}
    },
    {
        "label": "str1",
        "kind": 5,
        "importPath": "python-hello_world.6-concat",
        "description": "python-hello_world.6-concat",
        "peekOfCode": "str1 = \"Holberton\"\nstr2 = \"School\"\nstr1 += \" \"+str2\nprint(f\"Welcome to {str1}!\")",
        "detail": "python-hello_world.6-concat",
        "documentation": {}
    },
    {
        "label": "str2",
        "kind": 5,
        "importPath": "python-hello_world.6-concat",
        "description": "python-hello_world.6-concat",
        "peekOfCode": "str2 = \"School\"\nstr1 += \" \"+str2\nprint(f\"Welcome to {str1}!\")",
        "detail": "python-hello_world.6-concat",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "python-hello_world.7-edges",
        "description": "python-hello_world.7-edges",
        "peekOfCode": "word = \"Holberton\"\nword_first_3 = word[0:3]\nword_last_2 = word[-2:]\nmiddle_word = word[1:-1]\nprint(f\"First 3 letters: {word_first_3}\")\nprint(f\"Last 2 letters: {word_last_2}\")\nprint(f\"Middle word: {middle_word}\")",
        "detail": "python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "word_first_3",
        "kind": 5,
        "importPath": "python-hello_world.7-edges",
        "description": "python-hello_world.7-edges",
        "peekOfCode": "word_first_3 = word[0:3]\nword_last_2 = word[-2:]\nmiddle_word = word[1:-1]\nprint(f\"First 3 letters: {word_first_3}\")\nprint(f\"Last 2 letters: {word_last_2}\")\nprint(f\"Middle word: {middle_word}\")",
        "detail": "python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "word_last_2",
        "kind": 5,
        "importPath": "python-hello_world.7-edges",
        "description": "python-hello_world.7-edges",
        "peekOfCode": "word_last_2 = word[-2:]\nmiddle_word = word[1:-1]\nprint(f\"First 3 letters: {word_first_3}\")\nprint(f\"Last 2 letters: {word_last_2}\")\nprint(f\"Middle word: {middle_word}\")",
        "detail": "python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "middle_word",
        "kind": 5,
        "importPath": "python-hello_world.7-edges",
        "description": "python-hello_world.7-edges",
        "peekOfCode": "middle_word = word[1:-1]\nprint(f\"First 3 letters: {word_first_3}\")\nprint(f\"Last 2 letters: {word_last_2}\")\nprint(f\"Middle word: {middle_word}\")",
        "detail": "python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-hello_world.8-concat_edges",
        "description": "python-hello_world.8-concat_edges",
        "peekOfCode": "str = \"Python is an interpreted, interactive, object-oriented programming\\\n language that combines remarkable power with very clear syntax\"\nstr = str[39:67] + str[107:112] + str[:6]\nprint(str)",
        "detail": "python-hello_world.8-concat_edges",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "python-hello_world.8-concat_edges",
        "description": "python-hello_world.8-concat_edges",
        "peekOfCode": "str = str[39:67] + str[107:112] + str[:6]\nprint(str)",
        "detail": "python-hello_world.8-concat_edges",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "python-if_else_loops_functions.0-positive_or_negative",
        "description": "python-if_else_loops_functions.0-positive_or_negative",
        "peekOfCode": "number = random.randint(-10, 10)\nif number > 0:\n    print(f\"{number} is positive\")\nelif number < 0:\n    print(f\"{number} is negative\")\nelse:\n    print(f\"{number} is zero\")",
        "detail": "python-if_else_loops_functions.0-positive_or_negative",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "python-if_else_loops_functions.1-last_digit",
        "description": "python-if_else_loops_functions.1-last_digit",
        "peekOfCode": "number = random.randint(-10000, 10000)\nlast_digit = abs(number) % 10\nprint(\"Last digit of\", number, \"is\", end=\" \")\nif number < 0:\n    last_digit = -last_digit\n    print(last_digit, \"and is less than 6 and not 0\")\nelse:\n    print(last_digit, end=\" \")\n    if last_digit > 5:\n        print(\"and is greater than 5\")",
        "detail": "python-if_else_loops_functions.1-last_digit",
        "documentation": {}
    },
    {
        "label": "last_digit",
        "kind": 5,
        "importPath": "python-if_else_loops_functions.1-last_digit",
        "description": "python-if_else_loops_functions.1-last_digit",
        "peekOfCode": "last_digit = abs(number) % 10\nprint(\"Last digit of\", number, \"is\", end=\" \")\nif number < 0:\n    last_digit = -last_digit\n    print(last_digit, \"and is less than 6 and not 0\")\nelse:\n    print(last_digit, end=\" \")\n    if last_digit > 5:\n        print(\"and is greater than 5\")\n    elif last_digit == 0:",
        "detail": "python-if_else_loops_functions.1-last_digit",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.10-add",
        "description": "python-if_else_loops_functions.10-add",
        "peekOfCode": "def add(a, b):\n    return a + b",
        "detail": "python-if_else_loops_functions.10-add",
        "documentation": {}
    },
    {
        "label": "remove_char_at",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.101-remove_char_at",
        "description": "python-if_else_loops_functions.101-remove_char_at",
        "peekOfCode": "def remove_char_at(s, n):\n    if n >= 0 and n < len(s):\n        return s[:n] + s[n+1:]\n    else:\n        return s",
        "detail": "python-if_else_loops_functions.101-remove_char_at",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.102-magic_calculation",
        "description": "python-if_else_loops_functions.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b, c):\n    if a < b:\n        return c\n    if c > b:\n        return a + b\n    return a * b - c",
        "detail": "python-if_else_loops_functions.102-magic_calculation",
        "documentation": {}
    },
    {
        "label": "pow",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.11-pow",
        "description": "python-if_else_loops_functions.11-pow",
        "peekOfCode": "def pow(a, b):\n    return a ** b",
        "detail": "python-if_else_loops_functions.11-pow",
        "documentation": {}
    },
    {
        "label": "fizzbuzz",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.12-fizzbuzz",
        "description": "python-if_else_loops_functions.12-fizzbuzz",
        "peekOfCode": "def fizzbuzz():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\", end=\" \")\n        elif num % 3 == 0:\n            print(\"Fizz\", end=\" \")\n        elif num % 5 == 0:\n            print(\"Buzz\", end=\" \")\n        else:\n            print(num, end=\" \")",
        "detail": "python-if_else_loops_functions.12-fizzbuzz",
        "documentation": {}
    },
    {
        "label": "islower",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.7-islower",
        "description": "python-if_else_loops_functions.7-islower",
        "peekOfCode": "def islower(c):\n    # Check if the ASCII value of c is in the range of lowercase letters\n    return ord('a') <= ord(c) <= ord('z')",
        "detail": "python-if_else_loops_functions.7-islower",
        "documentation": {}
    },
    {
        "label": "uppercase",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.8-uppercase",
        "description": "python-if_else_loops_functions.8-uppercase",
        "peekOfCode": "def uppercase(input_str):\n    output_str = \"\"\n    for char in input_str:\n        if 'a' <= char <= 'z':\n            uppercase_char = chr(ord(char) - ord('a') + ord('A'))\n        else:\n            uppercase_char = char\n        output_str += \"{}\".format(uppercase_char)\n    print(output_str)",
        "detail": "python-if_else_loops_functions.8-uppercase",
        "documentation": {}
    },
    {
        "label": "print_last_digit",
        "kind": 2,
        "importPath": "python-if_else_loops_functions.9-print_last_digit",
        "description": "python-if_else_loops_functions.9-print_last_digit",
        "peekOfCode": "def print_last_digit(number):\n    last_digit = abs(number) % 10\n    print(last_digit, end='')\n    return last_digit",
        "detail": "python-if_else_loops_functions.9-print_last_digit",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-import_modules.0-add",
        "description": "python-import_modules.0-add",
        "peekOfCode": "a = 1\nb = 2\nif __name__ == \"__main__\":\n    from add_0 import add\n    result = add(a, b)\n    print(\"{} + {} = {}\".format(a, b, result))",
        "detail": "python-import_modules.0-add",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-import_modules.0-add",
        "description": "python-import_modules.0-add",
        "peekOfCode": "b = 2\nif __name__ == \"__main__\":\n    from add_0 import add\n    result = add(a, b)\n    print(\"{} + {} = {}\".format(a, b, result))",
        "detail": "python-import_modules.0-add",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "python-import_modules.1-calculation",
        "description": "python-import_modules.1-calculation",
        "peekOfCode": "a = 10\nb = 5\nif __name__ == \"__main__\":\n    from calculator_1 import add, sub, mul, div\n    result_add = add(a, b)\n    result_sub = sub(a, b)\n    result_mul = mul(a, b)\n    result_div = div(a, b)\n    output = \"{} + {} = {}\\n{} - {} = {}\\n{} * {} = {}\\n{} / {} = {}\".format(\n        a, b, result_add, a, b, result_sub, a, b, result_mul, a, b, result_div",
        "detail": "python-import_modules.1-calculation",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "python-import_modules.1-calculation",
        "description": "python-import_modules.1-calculation",
        "peekOfCode": "b = 5\nif __name__ == \"__main__\":\n    from calculator_1 import add, sub, mul, div\n    result_add = add(a, b)\n    result_sub = sub(a, b)\n    result_mul = mul(a, b)\n    result_div = div(a, b)\n    output = \"{} + {} = {}\\n{} - {} = {}\\n{} * {} = {}\\n{} / {} = {}\".format(\n        a, b, result_add, a, b, result_sub, a, b, result_mul, a, b, result_div\n    )",
        "detail": "python-import_modules.1-calculation",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "python-import_modules.102-magic_calculation",
        "description": "python-import_modules.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b):\n    from magic_calculation_102 import add, sub\n    if a < b:\n        c = add(a, b)\n        for i in range(4, 6):\n            c = add(c, i)\n        return c\n    else:\n        return sub(a, b)",
        "detail": "python-import_modules.102-magic_calculation",
        "documentation": {}
    }
]