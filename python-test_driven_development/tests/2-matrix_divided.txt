========================
Test for 2-matrix_divided.py
=========================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test with matrix of integers, float and both mixied
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[2.0, 4.0], [5.0, 6.0]], 2)
    [[1.0, 2.0], [2.5, 3.0]]

    >>> matrix_divided([[2, 4], [5.0, 6.0]], 2)
    [[1.0, 2.0], [2.5, 3.0]]



::

Test when div is not number  when div == 0 and it's not provided
    
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'a')
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 3],[4, 5]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'


::

Test when size of row of the matrix is not equal and when the element of the matrix is different from int and floats

    >>> matrix_divided([[1, 2, 3], [4, 5]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[2, 4], [6, 'a']], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2], [4, 5]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

